%lex

%%
\s+           /* skip whitespace */
\d+           return 'NUMBER'
[+\-]         return 'ADDITIVE_OPERATOR'
[*/]          return 'MULTIPLICATIVE_OPERATOR'

/lex

%{
function BinaryExpression(left, op, right){
  return {
    type: 'BinaryExpression',
    op,
    left,
    right
  }
}  

%}

%%

Program
  : StatementList
    {
      $$ = {
        type: 'Program',
        body: $1
      }
    }
  ;

StatementList
  : Statement 
    {
      $$ = [$1]
    }
  | StatementList Statement
    {
      $1.push($2); $$ = $1
    }
  ;

Statement
  : ExpressionStatement
  | EmptyStatement
  | BlockStatement
  ;


ExpressionStatement
  : Expression ';'
    { 
      $$ = {
        type: 'ExpressionStatement',
        expression: $1
      }
    }
  ;

EmptyStatement
  : ';'
    {
     $$ = {
       type: "EmptyStatement",
     } 
    }
  ;

BlockStatement
  : '{' StatementList '}'
    {
      $$ = {
        type: 'BlockStatement',
        statements: $2
      }
    }
  ;

Expression
  : AdditiveExpression
  ;

AdditiveExpression
  : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
      {$$ = BinaryExpression($1, $2, $3)}
  | MultiplicativeExpression
  ;

MultiplicativeExpression
  : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression
    {$$ = BinaryExpression($1, $2, $3)}
  | PrimaryExpression
  ;

PrimaryExpression
  : NumericLiteral
  | ParenthesizedExpression
  ;

Literal
  : NumericLiteral
  ;

NumericLiteral
  : NUMBER 
      { 
        $$ = {
          type: "NumericLiteral",
          value: Number($1)
        } 
      }
  ;

ParenthesizedExpression
  : '(' Expression ')' { $$ = $2 }
  ;