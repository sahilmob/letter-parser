%lex

%%
\s+           /* skip whitespace */
\d+           return 'NUMBER'
[+\-]         return 'ADDITIVE_OPERATOR'
[*/]          return 'MULTIPLICATIVE_OPERATOR'

/lex

%{
function BinaryExpression(left, op, right){
  return {
    type: 'BinaryExpression',
    op,
    left,
    right
  }
}  

%}

%%

Expression
  : AdditiveExpression
  ;

AdditiveExpression
  : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
      {$$ = BinaryExpression($1, $2, $3)}
  | MultiplicativeExpression
  ;

MultiplicativeExpression
  : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression
    {$$ = BinaryExpression($1, $2, $3)}
  | PrimaryExpression
  ;

PrimaryExpression
  : NumericLiteral
  | ParenthesizedExpression
  ;

Literal
  : NumericLiteral
  ;

NumericLiteral
  : NUMBER 
      { 
        $$ = {
          type: "NumericLiteral",
          value: Number($1)
        } 
      }
  ;

ParenthesizedExpression
  : '(' Expression ')' { $$ = $2 }
  ;